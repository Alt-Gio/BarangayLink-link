// Complete BarangayLink Database Schema - Supabase Optimized
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN              // Level 6 - Full system control
  BARANGAY_CAPTAIN   // Level 5 - Executive authority
  SECRETARY          // Level 4 - Documentation authority
  TREASURER          // Level 4 - Financial authority
  COUNCILOR          // Level 3 - Legislative authority
  STAFF              // Level 1 - Administrative support
}

enum ProjectStatus {
  PLANNING
  PENDING_APPROVAL
  APPROVED
  IN_PROGRESS
  REVIEW
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ProjectCategory {
  INFRASTRUCTURE
  HEALTH
  EDUCATION
  ENVIRONMENT
  SOCIAL
  DISASTER
  AGRICULTURE
  YOUTH
  SENIOR
  SPORTS
  CULTURAL
  TECHNOLOGY
  GOVERNANCE
  PEACE_ORDER
  OTHERS
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
  BLOCKED
  ON_HOLD
}

enum EventType {
  COMMUNITY
  MEETING
  PROGRAM
  EMERGENCY
  CELEBRATION
  TRAINING
  CEREMONY
  SPORTS
  CULTURAL
  HEALTH
  EDUCATION
  CONSULTATION
}

enum EventStatus {
  DRAFT
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum EventCategory {
  GENERAL
  GOVERNMENT
  HEALTH
  EDUCATION
  SPORTS
  CULTURAL
  EMERGENCY
  ENVIRONMENT
  INFRASTRUCTURE
  SOCIAL
}

enum AnnouncementType {
  GENERAL
  URGENT
  EVENT
  PROJECT
  POLICY
  SERVICE
  ACHIEVEMENT
  SCHEDULE
  MAINTENANCE
  WEATHER
  ORDINANCE
  ADVISORY
}

enum PublishStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum DocumentType {
  FILE
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  SPREADSHEET
  PRESENTATION
  ARCHIVE
  REPORT
  FORM
  CERTIFICATE
  PHOTO
}

enum AccessLevel {
  PUBLIC
  OFFICIALS
  MANAGEMENT
  ADMIN_ONLY
  INTERNAL
}

enum ActivityAction {
  CREATED
  UPDATED
  DELETED
  ARCHIVED
  RESTORED
  PROJECT_STARTED
  PROJECT_COMPLETED
  PROJECT_CANCELLED
  PROJECT_APPROVED
  TASK_ASSIGNED
  TASK_COMPLETED
  TASK_REOPENED
  EVENT_PUBLISHED
  EVENT_CANCELLED
  USER_LOGIN
  USER_LOGOUT
  ROLE_CHANGED
  DOCUMENT_UPLOADED
  DOCUMENT_DOWNLOADED
  ANNOUNCEMENT_PUBLISHED
  ANNOUNCEMENT_PINNED
}

enum ContentType {
  TEXT
  HTML
  JSON
  IMAGE
  FILE
  BOOLEAN
  NUMBER
}

enum GoalType {
  PERSONAL
  TEAM
  PROJECT
  BARANGAY
}

enum GoalCategory {
  EFFICIENCY
  QUALITY
  DELIVERY
  COLLABORATION
  INNOVATION
}

enum GoalStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

// Main Models
model User {
  id              String   @id @default(cuid())
  clerkUserId     String   @unique
  name            String
  email           String   @unique
  position        String
  role            UserRole
  employeeId      String?  @unique
  phoneNumber     String?
  profileImage    String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastActiveAt    DateTime?

  // Relations
  managedProjects    Project[] @relation("ProjectManager")
  teamProjects       Project[] @relation("ProjectTeam")
  createdProjects    Project[] @relation("ProjectCreator")
  assignedTasks      Task[]    @relation("TaskAssignees")
  createdTasks       Task[]    @relation("TaskCreator")
  createdEvents      Event[]   @relation("EventCreator")
  createdAnnouncements Announcement[] @relation("AnnouncementCreator")
  uploadedDocuments  Document[] @relation("DocumentUploader")
  comments           Comment[]
  activityLogs       ActivityLog[]
  pageContentUpdates PageContent[] @relation("ContentUpdater")
  settingUpdates     Setting[] @relation("SettingUpdater")
  createdGoals       Goal[] @relation("GoalCreator")
  assignedGoals      Goal[] @relation("GoalAssignees")

  @@map("users")
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([createdAt])
}

model Project {
  id                String          @id @default(cuid())
  name              String
  description       String
  status            ProjectStatus   @default(PLANNING)
  startDate         DateTime?
  dueDate           DateTime?
  completedDate     DateTime?
  budget            Decimal?        @db.Decimal(12, 2)
  expenditure       Decimal?        @default(0) @db.Decimal(12, 2)
  category          ProjectCategory
  priority          Priority        @default(MEDIUM)
  objectives        String?
  beneficiaries     String?
  location          String?
  methodology       String?
  expectedOutcome   String?
  metadata          Json?
  isPublic          Boolean         @default(true)
  isArchived        Boolean         @default(false)
  progressPercentage Int            @default(0)
  milestones        Json?           // Array of milestone objects
  managerId         String
  createdById       String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  manager         User            @relation("ProjectManager", fields: [managerId], references: [id])
  team            User[]          @relation("ProjectTeam")
  createdBy       User            @relation("ProjectCreator", fields: [createdById], references: [id])
  tasks           Task[]
  events          Event[]
  announcements   Announcement[]
  documents       Document[]
  activityLogs    ActivityLog[]

  @@map("projects")
  @@index([status])
  @@index([category])
  @@index([priority])
  @@index([isPublic])
  @@index([isArchived])
  @@index([managerId])
  @@index([createdById])
  @@index([startDate])
  @@index([dueDate])
  @@index([createdAt])
}

model Task {
  id              String      @id @default(cuid())
  title           String
  description     String?
  status          TaskStatus  @default(TODO)
  priority        Priority    @default(MEDIUM)
  dueDate         DateTime?
  startDate       DateTime?
  completedDate   DateTime?
  estimatedHours  Int?
  actualHours     Int?
  dependencies    Json?       // Array of task IDs
  projectId       String
  createdById     String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignees       User[]      @relation("TaskAssignees")
  createdBy       User        @relation("TaskCreator", fields: [createdById], references: [id])
  checklists      Checklist[]
  attachments     Attachment[]
  comments        Comment[]
  documents       Document[]
  activityLogs    ActivityLog[]

  @@map("tasks")
  @@index([status])
  @@index([priority])
  @@index([projectId])
  @@index([createdById])
  @@index([dueDate])
  @@index([startDate])
  @@index([createdAt])
}

model Event {
  id                String        @id @default(cuid())
  title             String
  description       String
  shortDescription  String?
  location          String
  venue             String?
  startDate         DateTime
  endDate           DateTime?
  startTime         String?
  endTime           String?
  isAllDay          Boolean       @default(false)
  eventType         EventType
  status            EventStatus   @default(DRAFT)
  category          EventCategory @default(GENERAL)
  isPublic          Boolean       @default(true)
  featuredOnLanding Boolean       @default(false)
  agenda            String?
  requirements      String?
  contactInfo       String?
  targetAudience    String?
  featuredImage     String?
  galleryImages     Json?         // Array of image URLs
  expectedAttendees Int?
  actualAttendees   Int?
  registrationRequired Boolean    @default(false)
  registrationDeadline DateTime?
  maxAttendees      Int?
  budget            Decimal?      @db.Decimal(12, 2)
  tags              Json?         // Array of strings
  projectId         String?
  createdById       String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  project         Project?      @relation(fields: [projectId], references: [id])
  createdBy       User          @relation("EventCreator", fields: [createdById], references: [id])
  announcements   Announcement[]
  documents       Document[]
  activityLogs    ActivityLog[]

  @@map("events")
  @@index([eventType])
  @@index([status])
  @@index([category])
  @@index([isPublic])
  @@index([featuredOnLanding])
  @@index([startDate])
  @@index([endDate])
  @@index([projectId])
  @@index([createdById])
  @@index([createdAt])
}

model Announcement {
  id              String          @id @default(cuid())
  title           String
  content         String
  excerpt         String?
  type            AnnouncementType @default(GENERAL)
  priority        Priority        @default(MEDIUM)
  status          PublishStatus   @default(DRAFT)
  isPublic        Boolean         @default(true)
  isPinned        Boolean         @default(false)
  showOnLanding   Boolean         @default(false)
  featuredImage   String?
  attachments     Json?           // Array of file URLs
  tags            Json?           // Array of strings
  projectId       String?
  eventId         String?
  createdById     String
  publishAt       DateTime?
  expiresAt       DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  publishedAt     DateTime?

  // Relations
  project         Project?        @relation(fields: [projectId], references: [id])
  event           Event?          @relation(fields: [eventId], references: [id])
  createdBy       User            @relation("AnnouncementCreator", fields: [createdById], references: [id])
  documents       Document[]
  activityLogs    ActivityLog[]

  @@map("announcements")
  @@index([type])
  @@index([priority])
  @@index([status])
  @@index([isPublic])
  @@index([isPinned])
  @@index([showOnLanding])
  @@index([projectId])
  @@index([eventId])
  @@index([createdById])
  @@index([publishAt])
  @@index([expiresAt])
  @@index([createdAt])
}

model Document {
  id                String        @id @default(cuid())
  filename          String
  originalName      String
  filepath          String
  url               String?
  mimetype          String
  size              BigInt
  type              DocumentType
  category          String?
  description       String?
  isPublic          Boolean       @default(false)
  accessLevel       AccessLevel   @default(OFFICIALS)
  uploadedById      String
  projectId         String?
  taskId            String?
  eventId           String?
  announcementId    String?
  metadata          Json?
  tags              Json?         // Array of strings
  version           Int           @default(1)
  downloadCount     Int           @default(0)
  lastAccessed      DateTime?
  isStarred         Boolean       @default(false)
  isArchived        Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  uploadedBy        User          @relation("DocumentUploader", fields: [uploadedById], references: [id])
  project           Project?      @relation(fields: [projectId], references: [id])
  task              Task?         @relation(fields: [taskId], references: [id])
  event             Event?        @relation(fields: [eventId], references: [id])
  announcement      Announcement? @relation(fields: [announcementId], references: [id])
  activityLogs      ActivityLog[]

  @@map("documents")
  @@index([type])
  @@index([category])
  @@index([isPublic])
  @@index([accessLevel])
  @@index([uploadedById])
  @@index([projectId])
  @@index([taskId])
  @@index([eventId])
  @@index([announcementId])
  @@index([isStarred])
  @@index([isArchived])
  @@index([createdAt])
}

model ActivityLog {
  id              String          @id @default(cuid())
  action          ActivityAction
  description     String
  entityType      String
  entityId        String
  oldValues       Json?
  newValues       Json?
  userId          String
  projectId       String?
  taskId          String?
  eventId         String?
  announcementId  String?
  documentId      String?
  ipAddress       String?
  userAgent       String?
  metadata        Json?
  createdAt       DateTime        @default(now())

  // Relations
  user            User            @relation(fields: [userId], references: [id])
  project         Project?        @relation(fields: [projectId], references: [id])
  task            Task?           @relation(fields: [taskId], references: [id])
  event            Event?          @relation(fields: [eventId], references: [id])
  announcement    Announcement?   @relation(fields: [announcementId], references: [id])
  document        Document?       @relation(fields: [documentId], references: [id])

  @@map("activity_logs")
  @@index([action])
  @@index([entityType])
  @@index([entityId])
  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([eventId])
  @@index([announcementId])
  @@index([documentId])
  @@index([createdAt])
}

// Supporting Models
model Checklist {
  id          String   @id @default(cuid())
  text        String
  completed   Boolean  @default(false)
  order       Int
  taskId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("checklists")
  @@index([taskId])
  @@index([completed])
  @@index([order])
}

model Attachment {
  id          String   @id @default(cuid())
  name        String
  url         String
  uploadedBy  String
  uploadedAt  DateTime @default(now())
  taskId      String

  // Relations
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("attachments")
  @@index([taskId])
  @@index([uploadedAt])
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  userId      String
  taskId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
  @@index([userId])
  @@index([taskId])
  @@index([createdAt])
}

model PageContent {
  id          String      @id @default(cuid())
  page        String
  section     String
  key         String
  value       String
  type        ContentType @default(TEXT)
  isActive    Boolean     @default(true)
  order       Int         @default(0)
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  updatedBy   String

  // Relations
  updatedByUser User      @relation("ContentUpdater", fields: [updatedBy], references: [id])

  @@unique([page, section, key])
  @@map("page_content")
  @@index([page])
  @@index([section])
  @@index([isActive])
  @@index([updatedBy])
}

model Setting {
  id          String      @id @default(cuid())
  key         String      @unique
  value       String
  type        ContentType @default(TEXT)
  description String?
  category    String?
  isPublic    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  updatedBy   String

  // Relations
  updatedByUser User      @relation("SettingUpdater", fields: [updatedBy], references: [id])

  @@map("settings")
  @@index([category])
  @@index([isPublic])
  @@index([updatedBy])
}

model Goal {
  id            String        @id @default(cuid())
  title         String
  description   String
  type          GoalType
  category      GoalCategory
  priority      Priority
  status        GoalStatus    @default(ACTIVE)
  targetValue   Float
  currentValue  Float         @default(0)
  unit          String
  startDate     DateTime      @default(now())
  targetDate    DateTime
  completedDate DateTime?
  rewards       Json?         // Array of rewards
  createdById   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  createdBy   User            @relation("GoalCreator", fields: [createdById], references: [id], onDelete: Cascade)
  assignees   User[]          @relation("GoalAssignees")
  milestones  GoalMilestone[]
  metrics     GoalMetric[]

  @@map("goals")
  @@index([type])
  @@index([category])
  @@index([priority])
  @@index([status])
  @@index([createdById])
  @@index([startDate])
  @@index([targetDate])
  @@index([createdAt])
}

model GoalMilestone {
  id            String    @id @default(cuid())
  title         String
  targetValue   Float
  isCompleted   Boolean   @default(false)
  completedDate DateTime?
  reward        String?
  order         Int       @default(0)
  goalId        String
  createdAt     DateTime  @default(now())

  // Relations
  goal Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@map("goal_milestones")
  @@index([goalId])
  @@index([isCompleted])
  @@index([order])
}

model GoalMetric {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  value     Float
  note      String?
  goalId    String
  createdAt DateTime @default(now())

  // Relations
  goal Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@map("goal_metrics")
  @@index([goalId])
  @@index([date])
}